------------------------------------------------------------------------------------------
Transfer and Convert the Datafiles
-----------------------------------------------------------------
1. Source : prepare 옵션으로 스크립트 실행 
            결과물로 데이터 파일 카피본과 rmanconvert.cmd, xttplan.txt가 생성됨
-----------------------------------------------------------------
[oracle@source]$ $ORACLE_HOME/perl/bin/perl xttdriver.pl -p > prepare.log 2>&1 &

-----------------------------------------------------------------
2. Source to Dest : 데이터 파일 카피본 dest 로 전송 (NFS인 경우 불필요)
                    생성된 rmanconvert.cmd dest로 전송
-----------------------------------------------------------------
[oracle@dest]$ scp oracle@source:/stage_source/* /stage_dest
[oracle@dest]$ scp oracle@source:/home/oracle/xtt/rmanconvert.cmd /home/oracle/xtt




[oracle@dest]$ $ORACLE_HOME/perl/bin/perl xttdriver.pl -c
 
Perform the Incremental Backup
Run the script to take the incremental backup on the source.

nohup perl xttdriver.pl -i > incr_bkup.log 2>&1 &
 
Copy the following files to the target and apply the incremental backup.

tsbkupmap.txt & xttplan.txt
nohup perl xttdriver.pl -r > incr_apply.log 2>&1 &

 
Determine the starting SCN for the next incremental backup.

nohup perl xttdriver.pl -s > next_scn.log 2>&1 &
 

Repeat the incremental backup as many times as necessary.

-- ADDITIONAL STEP --------------------------------------------------------
Complete the remaining steps to finish the migration.

1. Place the tablespaces into read only mode on the source.

alter tablespace APP_DATA read only;
alter tablespace APP_IDX read only;
alter tablespace APP_DATA2 read only;
…
 

2. Repeat the incremental backup and incremental apply steps from above.

3. Run a transportable tablespace Data Pump export on the source.

nohup impdp \”/ as sysdba\” parfile=migrate_tts.par > migrate_tts.log 2>&1 &
## migrate_tts.par
DIRECTORY=MIG_DIR
LOGFILE=MIG_TTS.log
NETWORK_LINK=ttslink
TRANSPORT_FULL_CHECK=no
TRANSPORT_TABLESPACES=APP_DATA,APP_IDX,APP_DATA2
TRANSPORT_DATAFILES=’/oradata/APP/APP_DATA_01.dbf’,’/oradata/APP/APP_IDX_01.dbf’,…
 

4. Run a metadata only Data Pump export from the source.

nohup expdp \”/ as sysdba\” parfile=migrate_meta.par > migrate_meta.log 2>&1 &
## migrate_meta.par
DIRECTORY = MIG_DIR
DUMPFILE = MIGRATE_META.dmp
LOGFILE = MIGRATE_META.log
FULL = Y
PARALLEL = 8
CONTENT = METADATA_ONLY
JOB_NAME = MIGRATE_META
EXCLUDE = STATISTICS,USER,ROLESTABLESPACE,DIRECTORY,TRIGGERS,INDEXES,TABLES,CONSTRAINTS
SCHEMA:”IN (‘SYSTEM’,’ANONYMOUS’,’DBSNMP’,’DIP’,’EXFSYS’,’MDSYS’,’MGMT_VIEW’,’ORACLE_OCM’,’ORDPLUGINS’,
‘ORDSYS’,’OUTLN’,’SI_INFORMTN_SCHEMA’,’SYSMAN’,’TSMSYS’,’WMSYS’,’XDB’,’PERFSTAT’,
‘OLAPSYS’,’APEX_030200′,’APEX_PUBLIC_USER’,’APPQOSSYS’,’FLOWS_FILES’,’CTXSYS’,’XS$NULL’)”
 

5. Run the metadata only Data Pump import on the target.

nohup impdp \”/ as sysdba\” parfile=migrate_meta_imp.par > migrate_meta_imp.log 2>&1 &
## migrate_meta_imp.par
DIRECTORY = MIG_DIR
DUMPFILE = MIGRATE_META.dmp
LOGFILE = MIGRATE_META_IMP.log
FULL = Y
PARALLEL = 8
JOB_NAME = MIGRATE_META_IMP
 

6. Reconcile the source and target databases to ensure that all objects came over successfully.

set lines 132 pages 500 trimspool on echo off verify off feedback off

col object_name format a30

select owner, object_type, object_name, status
from dba_objects
where owner not in (‘SYS’, ‘SYSTEM’, ‘TOAD’, ‘SCOTT’, ‘OUTLN’, ‘MSDB1’, ‘DBSNMP’,
‘PUBLIC’, ‘XDB’, ‘WMSYS’, ‘WKSYS’, ‘ORDSYS’, ‘OLAPSYS’, ‘ORDPLUGINS’, ‘ODM’, ‘ODM_MTR’, ‘MDSYS’, ‘CTXSYS’)
order by 1,2,3
minus
select owner, object_type, object_name, status
from dba_objects@ttslink
where owner not in (‘SYS’, ‘SYSTEM’, ‘TOAD’, ‘SCOTT’, ‘OUTLN’, ‘MSDB1’, ‘DBSNMP’,
‘PUBLIC’, ‘XDB’, ‘WMSYS’, ‘WKSYS’, ‘ORDSYS’, ‘OLAPSYS’, ‘ORDPLUGINS’, ‘ODM’, ‘ODM_MTR’, ‘MDSYS’, ‘CTXSYS’)
order by 1,2,3;

set echo on verify on feedback on

 

7. Set the tablespaces to read write on the target.

alter tablespace APP_DATA read write;
alter tablespace APP_IDX read write;
alter tablespace APP_DATA2 read write;
…
